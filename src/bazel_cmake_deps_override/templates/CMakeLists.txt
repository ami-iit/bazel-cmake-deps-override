cmake_minimum_required(VERSION 3.12...3.29)

# This script takes in input two variables:
# BCPO_CMAKE_PACKAGES
# BCPO_CMAKE_TARGETS
# And extracts some key target properties for the specified targets
project(bazel_cmake_deps_override_extractor_project)

message(STATUS "BCPO_CMAKE_PACKAGES: ${BCPO_CMAKE_PACKAGES} BCPO_CMAKE_TARGETS: ${BCPO_CMAKE_TARGETS}")
foreach(cmakePackage IN LISTS BCPO_CMAKE_PACKAGES)
    find_package(${cmakePackage} REQUIRED)
endforeach()

# Function to convert a list of strings into a TOML array.
# The output will look like: ["item1", "item2", ...]
function(list_to_toml input_list result)
  set(toml_str "[")
  foreach(item ${${input_list}})
    string(APPEND toml_str "\"${item}\", ")
  endforeach()
  # Remove the trailing comma and space if needed.
  string(REGEX REPLACE ", $" "]" toml_str "${toml_str}")
  set(${result} "${toml_str}" PARENT_SCOPE)
endfunction()

# Prepare the output file
set(OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/bcpo_target_properties.toml")
set(TOML_CONTENT "# This file is automatically generated by CMake\n\n")

# Debug functions, unused when not debugging, see https://stackoverflow.com/questions/32183975/how-to-print-all-the-properties-of-a-target-in-cmake
# Get all propreties that cmake supports
if(NOT CMAKE_PROPERTY_LIST)
    execute_process(COMMAND cmake --help-property-list OUTPUT_VARIABLE CMAKE_PROPERTY_LIST)
    # Convert command output into a CMake list
    string(REGEX REPLACE ";" "\\\\;" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
    string(REGEX REPLACE "\n" ";" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
    list(REMOVE_DUPLICATES CMAKE_PROPERTY_LIST)
endif()

function(print_properties)
    message("CMAKE_PROPERTY_LIST = ${CMAKE_PROPERTY_LIST}")
endfunction()

function(print_target_properties target)
    if(NOT TARGET ${target})
      message(STATUS "There is no target named '${target}'")
      return()
    endif()

    foreach(property ${CMAKE_PROPERTY_LIST})
        string(REPLACE "<CONFIG>" "${CMAKE_BUILD_TYPE}" property ${property})

        # Fix https://stackoverflow.com/questions/32197663/how-can-i-remove-the-the-location-property-may-not-be-read-from-target-error-i
        if(property STREQUAL "LOCATION" OR property MATCHES "^LOCATION_" OR property MATCHES "_LOCATION$")
            continue()
        endif()

        get_property(was_set TARGET ${target} PROPERTY ${property} SET)
        if(was_set)
            get_target_property(value ${target} ${property})
            message("${target} ${property} = ${value}")
        endif()
    endforeach()
endfunction()

function(generate_toml_info_for_target target)
  set(TARGET_TOML "[[targets]]\n")
  string(APPEND TARGET_TOML "cmake_target_name = \"${target}\"\n")

  get_target_property(_target_INTERFACE_INCLUDE_DIRECTORIES ${target} INTERFACE_INCLUDE_DIRECTORIES)
  if(_target_INTERFACE_INCLUDE_DIRECTORIES)
    list_to_toml(_target_INTERFACE_INCLUDE_DIRECTORIES TOML_INC)
    string(APPEND TARGET_TOML "interface_include_directories = ${TOML_INC}\n")
  endif()

  get_target_property(_target_INTERFACE_COMPILE_DEFINITIONS ${target} INTERFACE_COMPILE_DEFINITIONS)
  if(_target_INTERFACE_COMPILE_DEFINITIONS)
    list_to_toml(_target_INTERFACE_COMPILE_DEFINITIONS TOML_DEFS)
    string(APPEND TARGET_TOML "interface_compile_definitions = ${TOML_DEFS}\n")
  endif()

  get_target_property(_target_LOCATION ${target} LOCATION)
  if(_target_LOCATION)
    list_to_toml(_target_LOCATION TOML_LOCATION)
    string(APPEND TARGET_TOML "library_location = ${TOML_LOCATION}\n")
  endif()

  get_target_property(_target_INTERFACE_LINK_LIBRARIES ${target} INTERFACE_LINK_LIBRARIES)
  if(_target_INTERFACE_LINK_LIBRARIES)
    set(DEP_TARGETS)
    foreach(dep IN LISTS _target_INTERFACE_LINK_LIBRARIES)
      if(TARGET ${dep})
        list(APPEND DEP_TARGETS ${dep})
      else()
        message(FATAL_ERROR "Not handled non-target ${dep} dependency. Please open an issue.")
      endif()
    endforeach()
    list_to_toml(DEP_TARGETS TOML_DEP_TARGETS)
    string(APPEND TARGET_TOML "interface_link_libraries_targets = ${TOML_DEP_TARGETS}\n")
  endif()

  string(APPEND TARGET_TOML "\n")

  set(TARGET_TOML ${TARGET_TOML} PARENT_SCOPE)
endfunction()

# Process each target and its dependency
set(processedTargets "")
foreach(top_target ${BCPO_CMAKE_TARGETS})
  if(NOT TARGET ${top_target})
    message(FATAL_ERROR "Target '${top_target}' does not exist!")
  endif()

  set(_inc_dirs)
  set(_link_libs)
  set(_compile_defs)

  # We want to extract the INTERFACE_INCLUDE_DIRECTORIES, INTERFACE_COMPILE_DEFINITIONS and LOCATION
  # for the target of which we want to extract info, and recursively for each target contained in
  # INTERFACE_LINK_LIBRARIES
  set(_dependencies_stack ${top_target})
  set(_alreadyProcessedDeps "")

  # The condition of the while is that the _dependencies_stack is not empty
  while(_dependencies_stack)
    list(GET _dependencies_stack 0 _processedDep)
    list(REMOVE_ITEM _dependencies_stack ${_processedDep})
    list(APPEND _alreadyProcessedDeps ${_processedDep})

    if(TARGET ${_processedDep})
      if(NOT _processedDep IN_LIST processedTargets)
        list(APPEND processedTargets ${_processedDep})
      endif()
      # We add all the contents of INTERFACE_LINK_LIBRARIES to the stack of targets
      get_target_property(_dep_INTERFACE_LINK_LIBRARIES ${_processedDep} INTERFACE_LINK_LIBRARIES)
      if(_dep_INTERFACE_LINK_LIBRARIES)
        foreach(new_dep IN LISTS _dep_INTERFACE_LINK_LIBRARIES)
          if (NOT new_dep IN_LIST _alreadyProcessedDeps)
            list(APPEND _dependencies_stack ${new_dep})
          endif()
        endforeach()
      endif()
    endif()
  endwhile()
endforeach()

foreach(target IN LISTS processedTargets)
  generate_toml_info_for_target(${target})
  string(APPEND TOML_CONTENT "${TARGET_TOML}")
endforeach()

# Write the output to the TOML file.
file(WRITE ${OUTPUT_FILE} "${TOML_CONTENT}")
message(STATUS "Generated TOML file at: ${OUTPUT_FILE}")
